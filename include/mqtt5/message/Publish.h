// Generated by commsdsl2comms v4.0.0

/// @file
/// @brief Contains definition of <b>"PUBLISH"</b> message and its fields.

#pragma once

#include <cstdint>
#include <tuple>
#include "comms/MessageBase.h"
#include "comms/field/ArrayList.h"
#include "comms/field/Optional.h"
#include "comms/options.h"
#include "mqtt5/MsgId.h"
#include "mqtt5/field/FieldBase.h"
#include "mqtt5/field/PacketId.h"
#include "mqtt5/field/PublishPropertyList.h"
#include "mqtt5/field/TopicName.h"
#include "mqtt5/message/PublishCommon.h"
#include "mqtt5/options/DefaultOptions.h"


namespace mqtt5
{

namespace message
{


/// @brief Fields of @ref Publish.
/// @tparam TOpt Extra options
/// @see @ref Publish
/// @headerfile mqtt5/message/Publish.h
template <typename TOpt = mqtt5::options::DefaultOptions>
struct PublishFields
{
    /// @brief Definition of <b>"TopicName"</b> field.
    using TopicName =
        mqtt5::field::TopicName<
            TOpt
        >;
    
    
    /// @brief Definition of <b>"Packet ID"</b> field.
    class PacketId : public
        comms::field::Optional<
            mqtt5::field::PacketId<TOpt>,
            comms::option::def::MissingByDefault
        >
    {
        using Base =
            comms::field::Optional<
                mqtt5::field::PacketId<TOpt>,
                comms::option::def::MissingByDefault
            >;
    public:
        /// @brief Name of the field.
        static const char* name()
        {
            return mqtt5::message::PublishFieldsCommon::PacketIdCommon::name();
        }
        
    
    };
    
    
    /// @brief Definition of <b>"Publish Properties"</b> field.
    using Properties =
        mqtt5::field::PublishPropertyList<
            TOpt
        >;
    
    
    /// @brief Definition of <b>"Payload"</b> field.
    class Payload : public
        comms::field::ArrayList<
            mqtt5::field::FieldBase<>,
            std::uint8_t,
            typename TOpt::message::PublishFields::Payload
        >
    {
        using Base =
            comms::field::ArrayList<
                mqtt5::field::FieldBase<>,
                std::uint8_t,
                typename TOpt::message::PublishFields::Payload
            >;
    public:
        /// @brief Name of the field.
        static const char* name()
        {
            return mqtt5::message::PublishFieldsCommon::PayloadCommon::name();
        }
        
    
    };
    
    
    /// @brief All the fields bundled in std::tuple.
    using All = std::tuple<
        TopicName,
        PacketId,
        Properties,
        Payload
    >;
};

/// @brief Definition of <b>"PUBLISH"</b> message class.
/// @details
///     See @ref PublishFields for definition of the fields this message contains.
/// @tparam TMsgBase Base (interface) class.
/// @tparam TOpt Extra options
/// @headerfile mqtt5/message/Publish.h
template <typename TMsgBase, typename TOpt = mqtt5::options::DefaultOptions>
class Publish : public
    comms::MessageBase<
        TMsgBase,
        comms::option::def::StaticNumIdImpl<mqtt5::MsgId_Publish>,
        comms::option::def::FieldsImpl<typename PublishFields<TOpt>::All>,
        comms::option::def::MsgType<Publish<TMsgBase, TOpt> >,
        comms::option::def::HasName
    >
{
    // Redefinition of the base class type
    using Base =
        comms::MessageBase<
            TMsgBase,
            comms::option::def::StaticNumIdImpl<mqtt5::MsgId_Publish>,
            comms::option::def::FieldsImpl<typename PublishFields<TOpt>::All>,
            comms::option::def::MsgType<Publish<TMsgBase, TOpt> >,
            comms::option::def::HasName
        >;

public:
    /// @brief Provide names and allow access to internal fields.
    /// @details See definition of @b COMMS_MSG_FIELDS_NAMES macro
    ///     related to @b comms::MessageBase class from COMMS library
    ///     for details.
    ///
    ///     The generated values, types and functions are:
    ///     @li @b FieldIdx_topicName index, @b Field_topicName type and @b field_topicName() access fuction
    ///         for @ref PublishFields::TopicName field.
    ///     @li @b FieldIdx_packetId index, @b Field_packetId type and @b field_packetId() access fuction
    ///         for @ref PublishFields::PacketId field.
    ///     @li @b FieldIdx_properties index, @b Field_properties type and @b field_properties() access fuction
    ///         for @ref PublishFields::Properties field.
    ///     @li @b FieldIdx_payload index, @b Field_payload type and @b field_payload() access fuction
    ///         for @ref PublishFields::Payload field.
    COMMS_MSG_FIELDS_NAMES(
        topicName,
        packetId,
        properties,
        payload
    );
    
    // Compile time check for serialisation length.
    static const std::size_t MsgMinLen = Base::doMinLength();
    static_assert(MsgMinLen == 3U, "Unexpected min serialisation length");
    
    /// @brief Name of the message.
    static const char* doName()
    {
        return mqtt5::message::PublishCommon::name();
    }
    

};

} // namespace message

} // namespace mqtt5


