// Generated by commsdsl2comms v4.0.0

/// @file
/// @brief Contains definition of <b>""</b> field.

#pragma once

#include <tuple>
#include "comms/CompileControl.h"
#include "comms/field/Variant.h"
#include "comms/options.h"
#include "mqtt5/field/ClientDisconnectPropertyCommon.h"
#include "mqtt5/field/FieldBase.h"
#include "mqtt5/field/PropertyReasonString.h"
#include "mqtt5/field/PropertyServerReference.h"
#include "mqtt5/field/PropertySessionExpiryInterval.h"
#include "mqtt5/field/PropertyUserProperty.h"
#include "mqtt5/options/DefaultOptions.h"

namespace mqtt5
{

namespace field
{


/// @brief Scope for all the member fields of
///     @ref ClientDisconnectProperty field.
/// @tparam TOpt Protocol options.
template <typename TOpt = mqtt5::options::DefaultOptions>
struct ClientDisconnectPropertyMembers
{
    /// @brief Definition of <b>"Session Expiry Interval"</b> field.
    using SessionExpiryInterval =
        mqtt5::field::PropertySessionExpiryInterval<
            TOpt
        >;


    /// @brief Definition of <b>"Reason String"</b> field.
    using ReasonString =
        mqtt5::field::PropertyReasonString<
            TOpt
        >;


    /// @brief Definition of <b>"User Property"</b> field.
    using UserProperty =
        mqtt5::field::PropertyUserProperty<
            TOpt
        >;


    /// @brief Definition of <b>"Server Reference"</b> field.
    using ServerReference =
        mqtt5::field::PropertyServerReference<
            TOpt
        >;


    /// @brief All members bundled in @b std::tuple.
    using All =
        std::tuple<
           SessionExpiryInterval,
           ReasonString,
           UserProperty,
           ServerReference
        >;
};

/// @brief Definition of <b>""</b> field.
/// @details
///     Defined in section 3.14.2.1.
/// @tparam TOpt Protocol options.
/// @tparam TExtraOpts Extra options.
template <typename TOpt = mqtt5::options::DefaultOptions, typename... TExtraOpts>
class ClientDisconnectProperty : public
    comms::field::Variant<
        mqtt5::field::FieldBase<>,
        typename ClientDisconnectPropertyMembers<TOpt>::All,
        TExtraOpts...
    >
{
    using Base =
        comms::field::Variant<
            mqtt5::field::FieldBase<>,
            typename ClientDisconnectPropertyMembers<TOpt>::All,
            TExtraOpts...
        >;
public:
    /// @brief Allow access to internal fields.
    /// @details See definition of @b COMMS_VARIANT_MEMBERS_NAMES macro
    ///     related to @b comms::field::Variant class from COMMS library
    ///     for details.
    ///
    ///     The generated values, types and access functions are:
    ///     @li @b FieldIdx_sessionExpiryInterval index, @b Field_sessionExpiryInterval type,
    ///         @b initField_sessionExpiryInterval() and @b accessField_sessionExpiryInterval() access functions -
    ///         for mqtt5::field::ClientDisconnectPropertyMembers::SessionExpiryInterval member field.
    ///     @li @b FieldIdx_reasonString index, @b Field_reasonString type,
    ///         @b initField_reasonString() and @b accessField_reasonString() access functions -
    ///         for mqtt5::field::ClientDisconnectPropertyMembers::ReasonString member field.
    ///     @li @b FieldIdx_userProperty index, @b Field_userProperty type,
    ///         @b initField_userProperty() and @b accessField_userProperty() access functions -
    ///         for mqtt5::field::ClientDisconnectPropertyMembers::UserProperty member field.
    ///     @li @b FieldIdx_serverReference index, @b Field_serverReference type,
    ///         @b initField_serverReference() and @b accessField_serverReference() access functions -
    ///         for mqtt5::field::ClientDisconnectPropertyMembers::ServerReference member field.
    COMMS_VARIANT_MEMBERS_NAMES(
        sessionExpiryInterval,
        reasonString,
        userProperty,
        serverReference
    );

    /// @brief Optimized currFieldExec functionality.
    /// @details Replaces the currFieldExec() member function defined
    ///    by @b comms::field::Variant.
    template <typename TFunc>
    void currFieldExec(TFunc&& func)
    {
        switch (Base::currentField()) {
        case FieldIdx_sessionExpiryInterval:
            memFieldDispatch<FieldIdx_sessionExpiryInterval>(accessField_sessionExpiryInterval(), std::forward<TFunc>(func));
            break;
        case FieldIdx_reasonString:
            memFieldDispatch<FieldIdx_reasonString>(accessField_reasonString(), std::forward<TFunc>(func));
            break;
        case FieldIdx_userProperty:
            memFieldDispatch<FieldIdx_userProperty>(accessField_userProperty(), std::forward<TFunc>(func));
            break;
        case FieldIdx_serverReference:
            memFieldDispatch<FieldIdx_serverReference>(accessField_serverReference(), std::forward<TFunc>(func));
            break;
        default:
            static constexpr bool Invalid_field_execution = false;
            static_cast<void>(Invalid_field_execution);
            COMMS_ASSERT(Invalid_field_execution);
            break;
        }
    }

    /// @brief Optimized currFieldExec functionality (const variant).
    /// @details Replaces the currFieldExec() member function defined
    ///    by @b comms::field::Variant.
    template <typename TFunc>
    void currFieldExec(TFunc&& func) const
    {
        switch (Base::currentField()) {
        case FieldIdx_sessionExpiryInterval:
            memFieldDispatch<FieldIdx_sessionExpiryInterval>(accessField_sessionExpiryInterval(), std::forward<TFunc>(func));
            break;
        case FieldIdx_reasonString:
            memFieldDispatch<FieldIdx_reasonString>(accessField_reasonString(), std::forward<TFunc>(func));
            break;
        case FieldIdx_userProperty:
            memFieldDispatch<FieldIdx_userProperty>(accessField_userProperty(), std::forward<TFunc>(func));
            break;
        case FieldIdx_serverReference:
            memFieldDispatch<FieldIdx_serverReference>(accessField_serverReference(), std::forward<TFunc>(func));
            break;
        default:
            static constexpr bool Invalid_field_execution = false;
            static_cast<void>(Invalid_field_execution);
            COMMS_ASSERT(Invalid_field_execution);
            break;
        }
    }

    /// @brief Name of the field.
    static const char* name()
    {
        return mqtt5::field::ClientDisconnectPropertyCommon::name();
    }


private:
    template <std::size_t TIdx, typename TField, typename TFunc>
    static void memFieldDispatch(TField&& f, TFunc&& func)
    {
        #ifdef _MSC_VER
            func.operator()<TIdx>(std::forward<TField>(f)); // VS compiler
        #else // #ifdef _MSC_VER
            func.template operator()<TIdx>(std::forward<TField>(f)); // All other compilers
        #endif // #ifdef _MSC_VER
    }


};


} // namespace field

} // namespace mqtt5

