// Generated by commsdsl2comms v5.0.0

/// @file
/// @brief Contains common template parameters independent functionality of
///    @ref mqtt5::field::DisconnectReasonCode field.

#pragma once

#include <algorithm>
#include <cstdint>
#include <iterator>
#include <type_traits>
#include <utility>

namespace mqtt5
{

namespace field
{

/// @brief Common types and functions for
///     @ref mqtt5::field::DisconnectReasonCode field.
struct DisconnectReasonCodeCommon
{
    /// @brief Values enumerator for
    ///     @ref mqtt5::field::DisconnectReasonCode field.
    enum class ValueType : std::uint8_t
    {
        NormalDisconnection = 0, ///< value <b>Normal disconnection</b>.
        DisconnectWithWill = 4, ///< value <b>Disconnect with will</b>.
        UnspecifiedError = 128, ///< value <b>Unspecified error</b>.
        MalformedPacket = 129, ///< value <b>Malformed packet</b>.
        ProtocolError = 130, ///< value <b>Protocol error</b>.
        ImplSpecificError = 131, ///< value <b>Implementation specific error</b>.
        NotAuthorized = 135, ///< value <b>Not authorized</b>.
        ServerBusy = 137, ///< value <b>Server busy</b>.
        ServerShuttingDown = 139, ///< value <b>Server shutting down</b>.
        KeepAliveTimeout = 141, ///< value <b>Keep alive timeout</b>.
        SessionTakenOver = 142, ///< value <b>Session taken over</b>.
        TopicFilterInvalid = 143, ///< value <b>Topic filter invalid</b>.
        TopicNameInvalid = 144, ///< value <b>Topic name invalid</b>.
        ReceiveMaxExceeded = 147, ///< value <b>Receive maximum exceeded</b>.
        TopicAliasInvalid = 148, ///< value <b>Topic alias invalid</b>.
        PacketTooLarge = 149, ///< value <b>Packet too large</b>.
        MsgRateTooHigh = 150, ///< value <b>Message rate too high</b>.
        QuotaExceeded = 151, ///< value <b>Quota exceeded</b>.
        AdministrativeAction = 152, ///< value <b>Administrative action</b>.
        PayloadFormatInvalid = 153, ///< value <b>Payload format invalid</b>.
        RetainNotSupported = 154, ///< value <b>Retain not supported</b>.
        QosNotSupported = 155, ///< value <b>QoS not supported</b>.
        UseAnotherServer = 156, ///< value <b>Use another server</b>.
        ServerMoved = 157, ///< value <b>Server moved</b>.
        SharedSubNotSuppored = 158, ///< value <b>Shared subscriptions not supported</b>.
        ConnectionRateExceeded = 159, ///< value <b>Connection rate exceeded</b>.
        MaxConnectTime = 160, ///< value <b>Maximum connect time</b>.
        SubIdsNotSupported = 161, ///< value <b>Subscription ID:s not supported</b>.
        WildcardSubsNotSupported = 162, ///< value <b>Wildcard Subscriptions not supported</b>.

        // --- Extra values generated for convenience ---
        FirstValue = 0, ///< First defined value.
        LastValue = 162, ///< Last defined value.
        ValuesLimit = 163, ///< Upper limit for defined values.
    };

    /// @brief Single value name info entry
    using ValueNameInfo = std::pair<ValueType, const char*>;

    /// @brief Type returned from @ref valueNamesMap() member function.
    /// @details The @b first value of the pair is pointer to the map array,
    ///     The @b second value of the pair is the size of the array.
    using ValueNamesMapInfo = std::pair<const ValueNameInfo*, std::size_t>;

    /// @brief Name of the @ref mqtt5::field::DisconnectReasonCode field.
    static const char* name()
    {
        return "Reason code";
    }

    /// @brief Retrieve name of the enum value
    static const char* valueName(ValueType val)
    {
        auto namesMapInfo = valueNamesMap();
        auto begIter = namesMapInfo.first;
        auto endIter = begIter + namesMapInfo.second;
        auto iter = std::lower_bound(
            begIter, endIter, val,
            [](const ValueNameInfo& info, ValueType v) -> bool
            {
                return info.first < v;
            });

        if ((iter == endIter) || (iter->first != val)) {
            return nullptr;
        }

        return iter->second;
    }

    /// @brief Retrieve map of enum value names
    static ValueNamesMapInfo valueNamesMap()
    {
        static const ValueNameInfo Map[] = {
            std::make_pair(ValueType::NormalDisconnection, "Normal disconnection"),
            std::make_pair(ValueType::DisconnectWithWill, "Disconnect with will"),
            std::make_pair(ValueType::UnspecifiedError, "Unspecified error"),
            std::make_pair(ValueType::MalformedPacket, "Malformed packet"),
            std::make_pair(ValueType::ProtocolError, "Protocol error"),
            std::make_pair(ValueType::ImplSpecificError, "Implementation specific error"),
            std::make_pair(ValueType::NotAuthorized, "Not authorized"),
            std::make_pair(ValueType::ServerBusy, "Server busy"),
            std::make_pair(ValueType::ServerShuttingDown, "Server shutting down"),
            std::make_pair(ValueType::KeepAliveTimeout, "Keep alive timeout"),
            std::make_pair(ValueType::SessionTakenOver, "Session taken over"),
            std::make_pair(ValueType::TopicFilterInvalid, "Topic filter invalid"),
            std::make_pair(ValueType::TopicNameInvalid, "Topic name invalid"),
            std::make_pair(ValueType::ReceiveMaxExceeded, "Receive maximum exceeded"),
            std::make_pair(ValueType::TopicAliasInvalid, "Topic alias invalid"),
            std::make_pair(ValueType::PacketTooLarge, "Packet too large"),
            std::make_pair(ValueType::MsgRateTooHigh, "Message rate too high"),
            std::make_pair(ValueType::QuotaExceeded, "Quota exceeded"),
            std::make_pair(ValueType::AdministrativeAction, "Administrative action"),
            std::make_pair(ValueType::PayloadFormatInvalid, "Payload format invalid"),
            std::make_pair(ValueType::RetainNotSupported, "Retain not supported"),
            std::make_pair(ValueType::QosNotSupported, "QoS not supported"),
            std::make_pair(ValueType::UseAnotherServer, "Use another server"),
            std::make_pair(ValueType::ServerMoved, "Server moved"),
            std::make_pair(ValueType::SharedSubNotSuppored, "Shared subscriptions not supported"),
            std::make_pair(ValueType::ConnectionRateExceeded, "Connection rate exceeded"),
            std::make_pair(ValueType::MaxConnectTime, "Maximum connect time"),
            std::make_pair(ValueType::SubIdsNotSupported, "Subscription ID:s not supported"),
            std::make_pair(ValueType::WildcardSubsNotSupported, "Wildcard Subscriptions not supported")
        };
        static const std::size_t MapSize = std::extent<decltype(Map)>::value;

        return std::make_pair(&Map[0], MapSize);
    }
};

/// @brief Values enumerator for
///     @ref mqtt5::field::DisconnectReasonCode field.
using DisconnectReasonCodeVal = DisconnectReasonCodeCommon::ValueType;

} // namespace field

} // namespace mqtt5
