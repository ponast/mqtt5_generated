// Generated by commsdsl2comms v4.0.0

/// @file
/// @brief Contains definition of <b>"User Property"</b> field.

#pragma once

#include <cstdint>
#include <tuple>
#include "comms/field/Bundle.h"
#include "comms/field/IntValue.h"
#include "comms/options.h"
#include "mqtt5/field/FieldBase.h"
#include "mqtt5/field/String.h"
#include "mqtt5/field/UserPropertyCommon.h"
#include "mqtt5/options/DefaultOptions.h"

namespace mqtt5
{

namespace field
{


/// @brief Scope for all the member fields of
///     @ref UserProperty field.
/// @tparam TOpt Protocol options.
template <typename TOpt = mqtt5::options::DefaultOptions>
struct UserPropertyMembers
{
    /// @brief Definition of <b>"Id"</b> field.
    class Id : public
        comms::field::IntValue<
            mqtt5::field::FieldBase<comms::option::def::LittleEndian>,
            std::uint32_t,
            comms::option::def::FailOnInvalid<>,
            comms::option::def::VarLength<1U, 4U>,
            comms::option::def::UnitsBytes,
            comms::option::def::DefaultNumValue<38>,
            comms::option::def::ValidNumValue<38>,
            comms::option::def::HasCustomRefresh
        >
    {
        using Base =
            comms::field::IntValue<
                mqtt5::field::FieldBase<comms::option::def::LittleEndian>,
                std::uint32_t,
                comms::option::def::FailOnInvalid<>,
                comms::option::def::VarLength<1U, 4U>,
                comms::option::def::UnitsBytes,
                comms::option::def::DefaultNumValue<38>,
                comms::option::def::ValidNumValue<38>,
                comms::option::def::HasCustomRefresh
            >;
    public:
        /// @brief Re-definition of the value type.
        using ValueType = typename Base::ValueType;

        /// @brief Compile time detection of special values presence.
        static constexpr bool hasSpecials()
        {
            return mqtt5::field::UserPropertyMembersCommon::IdCommon::hasSpecials();
        }


        /// @brief Name of the field.
        static const char* name()
        {
            return mqtt5::field::UserPropertyMembersCommon::IdCommon::name();
        }

        /// @brief Generated refresh functionality.
        bool refresh()
        {
            bool updated = Base::refresh();
            if (Base::valid()) {
                return updated;
            };
            Base::value() = static_cast<ValueType>(38);
            return true;

        }



    };


    /// @brief Scope for all the member fields of
    ///     @ref Value field.
    struct ValueMembers
    {
        /// @brief Definition of <b>"First"</b> field.
        class First : public
            mqtt5::field::String<
                TOpt
            >
        {
            using Base =
                mqtt5::field::String<
                    TOpt
                >;
        public:
            /// @brief Name of the field.
            static const char* name()
            {
                return mqtt5::field::UserPropertyMembersCommon::ValueMembersCommon::FirstCommon::name();
            }


        };


        /// @brief Definition of <b>"Second"</b> field.
        class Second : public
            mqtt5::field::String<
                TOpt
            >
        {
            using Base =
                mqtt5::field::String<
                    TOpt
                >;
        public:
            /// @brief Name of the field.
            static const char* name()
            {
                return mqtt5::field::UserPropertyMembersCommon::ValueMembersCommon::SecondCommon::name();
            }


        };


        /// @brief All members bundled in @b std::tuple.
        using All =
            std::tuple<
               First,
               Second
            >;
    };

    /// @brief Definition of <b>"Value"</b> field.
    class Value : public
        comms::field::Bundle<
            mqtt5::field::FieldBase<>,
            typename ValueMembers::All
        >
    {
        using Base =
            comms::field::Bundle<
                mqtt5::field::FieldBase<>,
                typename ValueMembers::All
            >;
    public:
        /// @brief Allow access to internal fields.
        /// @details See definition of @b COMMS_FIELD_MEMBERS_NAMES macro
        ///     related to @b comms::field::Bundle class from COMMS library
        ///     for details.
        ///
        ///     The generated values, types and access functions are:
        ///     @li @b FieldIdx_first index, @b Field_first type and @b field_first() access function -
        ///         for mqtt5::field::UserPropertyMembers::ValueMembers::First member field.
        ///     @li @b FieldIdx_second index, @b Field_second type and @b field_second() access function -
        ///         for mqtt5::field::UserPropertyMembers::ValueMembers::Second member field.
        COMMS_FIELD_MEMBERS_NAMES(
            first,
            second
        );


        /// @brief Name of the field.
        static const char* name()
        {
            return mqtt5::field::UserPropertyMembersCommon::ValueCommon::name();
        }


    };


    /// @brief All members bundled in @b std::tuple.
    using All =
        std::tuple<
           Id,
           Value
        >;
};

/// @brief Definition of <b>"User Property"</b> field.
/// @tparam TOpt Protocol options.
/// @tparam TExtraOpts Extra options.
template <typename TOpt = mqtt5::options::DefaultOptions, typename... TExtraOpts>
class UserProperty : public
    comms::field::Bundle<
        mqtt5::field::FieldBase<>,
        typename UserPropertyMembers<TOpt>::All,
        TExtraOpts...
    >
{
    using Base =
        comms::field::Bundle<
            mqtt5::field::FieldBase<>,
            typename UserPropertyMembers<TOpt>::All,
            TExtraOpts...
        >;
public:
    /// @brief Allow access to internal fields.
    /// @details See definition of @b COMMS_FIELD_MEMBERS_NAMES macro
    ///     related to @b comms::field::Bundle class from COMMS library
    ///     for details.
    ///
    ///     The generated values, types and access functions are:
    ///     @li @b FieldIdx_id index, @b Field_id type and @b field_id() access function -
    ///         for mqtt5::field::UserPropertyMembers::Id member field.
    ///     @li @b FieldIdx_value index, @b Field_value type and @b field_value() access function -
    ///         for mqtt5::field::UserPropertyMembers::Value member field.
    COMMS_FIELD_MEMBERS_NAMES(
        id,
        value
    );


    /// @brief Name of the field.
    static const char* name()
    {
        return mqtt5::field::UserPropertyCommon::name();
    }


};


} // namespace field

} // namespace mqtt5

