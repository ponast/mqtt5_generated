// Generated by commsdsl2comms v5.0.0

/// @file
/// @brief Contains definition of <b>""</b> field.

#pragma once

#include <tuple>
#include "comms/Assert.h"
#include "comms/CompileControl.h"
#include "comms/field/Variant.h"
#include "comms/options.h"
#include "mqtt5/field/AuthPropertyCommon.h"
#include "mqtt5/field/FieldBase.h"
#include "mqtt5/field/PropertyAuthData.h"
#include "mqtt5/field/PropertyAuthMethod.h"
#include "mqtt5/field/PropertyReasonString.h"
#include "mqtt5/field/PropertyUserProperty.h"
#include "mqtt5/options/DefaultOptions.h"

namespace mqtt5
{

namespace field
{

/// @brief Scope for all the member fields of
///     @ref AuthProperty field.
/// @tparam TOpt Protocol options.
template <typename TOpt = mqtt5::options::DefaultOptions>
struct AuthPropertyMembers
{
    /// @brief Definition of <b>"Authentication method"</b> field.
    using AuthMethod =
        mqtt5::field::PropertyAuthMethod<
            TOpt
        >;

    /// @brief Definition of <b>"Authentication data"</b> field.
    using AuthData =
        mqtt5::field::PropertyAuthData<
            TOpt
        >;

    /// @brief Definition of <b>"Reason string"</b> field.
    using ReasonString =
        mqtt5::field::PropertyReasonString<
            TOpt
        >;

    /// @brief Definition of <b>"User property"</b> field.
    using UserProperty =
        mqtt5::field::PropertyUserProperty<
            TOpt
        >;

    /// @brief All members bundled in @b std::tuple.
    using All =
        std::tuple<
           AuthMethod,
           AuthData,
           ReasonString,
           UserProperty
        >;
};

/// @brief Definition of <b>""</b> field.
/// @details
///     Defined in section 3.15.2.2.
/// @tparam TOpt Protocol options.
/// @tparam TExtraOpts Extra options.
template <typename TOpt = mqtt5::options::DefaultOptions, typename... TExtraOpts>
class AuthProperty : public
    comms::field::Variant<
        mqtt5::field::FieldBase<>,
        typename AuthPropertyMembers<TOpt>::All,
        TExtraOpts...,
        comms::option::def::HasCustomRead
    >
{
    using Base =
        comms::field::Variant<
            mqtt5::field::FieldBase<>,
            typename AuthPropertyMembers<TOpt>::All,
            TExtraOpts...,
            comms::option::def::HasCustomRead
        >;
public:
    /// @brief Allow access to internal fields.
    /// @details See definition of @b COMMS_VARIANT_MEMBERS_NAMES macro
    ///     related to @b comms::field::Variant class from COMMS library
    ///     for details.
    ///
    ///     The generated values, types and access functions are:
    ///     @li @b FieldIdx_authMethod index, @b Field_authMethod type,
    ///         @b initField_authMethod() and @b accessField_authMethod() access functions -
    ///         for mqtt5::field::AuthPropertyMembers::AuthMethod member field.
    ///     @li @b FieldIdx_authData index, @b Field_authData type,
    ///         @b initField_authData() and @b accessField_authData() access functions -
    ///         for mqtt5::field::AuthPropertyMembers::AuthData member field.
    ///     @li @b FieldIdx_reasonString index, @b Field_reasonString type,
    ///         @b initField_reasonString() and @b accessField_reasonString() access functions -
    ///         for mqtt5::field::AuthPropertyMembers::ReasonString member field.
    ///     @li @b FieldIdx_userProperty index, @b Field_userProperty type,
    ///         @b initField_userProperty() and @b accessField_userProperty() access functions -
    ///         for mqtt5::field::AuthPropertyMembers::UserProperty member field.
    COMMS_VARIANT_MEMBERS_NAMES(
        authMethod,
        authData,
        reasonString,
        userProperty
    );

    /// @brief Optimized currFieldExec functionality.
    /// @details Replaces the currFieldExec() member function defined
    ///    by @b comms::field::Variant.
    template <typename TFunc>
    void currFieldExec(TFunc&& func)
    {
        switch (Base::currentField()) {
        case FieldIdx_authMethod:
            memFieldDispatch<FieldIdx_authMethod>(accessField_authMethod(), std::forward<TFunc>(func));
            break;
        case FieldIdx_authData:
            memFieldDispatch<FieldIdx_authData>(accessField_authData(), std::forward<TFunc>(func));
            break;
        case FieldIdx_reasonString:
            memFieldDispatch<FieldIdx_reasonString>(accessField_reasonString(), std::forward<TFunc>(func));
            break;
        case FieldIdx_userProperty:
            memFieldDispatch<FieldIdx_userProperty>(accessField_userProperty(), std::forward<TFunc>(func));
            break;
        default:
            static constexpr bool Invalid_field_execution = false;
            static_cast<void>(Invalid_field_execution);
            COMMS_ASSERT(Invalid_field_execution);
            break;
        }
    }

    /// @brief Optimized currFieldExec functionality (const variant).
    /// @details Replaces the currFieldExec() member function defined
    ///    by @b comms::field::Variant.
    template <typename TFunc>
    void currFieldExec(TFunc&& func) const
    {
        switch (Base::currentField()) {
        case FieldIdx_authMethod:
            memFieldDispatch<FieldIdx_authMethod>(accessField_authMethod(), std::forward<TFunc>(func));
            break;
        case FieldIdx_authData:
            memFieldDispatch<FieldIdx_authData>(accessField_authData(), std::forward<TFunc>(func));
            break;
        case FieldIdx_reasonString:
            memFieldDispatch<FieldIdx_reasonString>(accessField_reasonString(), std::forward<TFunc>(func));
            break;
        case FieldIdx_userProperty:
            memFieldDispatch<FieldIdx_userProperty>(accessField_userProperty(), std::forward<TFunc>(func));
            break;
        default:
            static constexpr bool Invalid_field_execution = false;
            static_cast<void>(Invalid_field_execution);
            COMMS_ASSERT(Invalid_field_execution);
            break;
        }
    }

    /// @brief Name of the field.
    static const char* name()
    {
        return mqtt5::field::AuthPropertyCommon::name();
    }

    COMMS_MSVC_WARNING_PUSH
    COMMS_MSVC_WARNING_DISABLE(4702)
    /// @brief Generated read functionality.
    template <typename TIter>
    comms::ErrorStatus read(TIter& iter, std::size_t len)
    {
        using CommonKeyField=
            comms::field::IntValue<
                mqtt5::field::FieldBase<comms::option::def::LittleEndian>,
                std::uint32_t,
                comms::option::def::FailOnInvalid<>,
                comms::option::def::VarLength<1U, 4U>
            >;
        CommonKeyField commonKeyField;

        auto origIter = iter;
        auto es = commonKeyField.read(iter, len);
        if (es != comms::ErrorStatus::Success) {
            return es;
        }

        auto consumedLen = static_cast<std::size_t>(std::distance(origIter, iter));
        COMMS_ASSERT(consumedLen <= len);
        len -= consumedLen;

        switch (commonKeyField.getValue()) {
        case 21U /* 0x00000015U */:
            {
                auto& field_authMethod = initField_authMethod();
                COMMS_ASSERT(field_authMethod.field_id().getValue() == commonKeyField.getValue());
                return field_authMethod.template readFrom<1>(iter, len);
            }
        case 22U /* 0x00000016U */:
            {
                auto& field_authData = initField_authData();
                COMMS_ASSERT(field_authData.field_id().getValue() == commonKeyField.getValue());
                return field_authData.template readFrom<1>(iter, len);
            }
        case 31U /* 0x0000001FU */:
            {
                auto& field_reasonString = initField_reasonString();
                COMMS_ASSERT(field_reasonString.field_id().getValue() == commonKeyField.getValue());
                return field_reasonString.template readFrom<1>(iter, len);
            }
        case 38U /* 0x00000026U */:
            {
                auto& field_userProperty = initField_userProperty();
                COMMS_ASSERT(field_userProperty.field_id().getValue() == commonKeyField.getValue());
                return field_userProperty.template readFrom<1>(iter, len);
            }
        default:
            break;
        };

        return comms::ErrorStatus::InvalidMsgData;
    }
    COMMS_MSVC_WARNING_POP

private:
    template <std::size_t TIdx, typename TField, typename TFunc>
    static void memFieldDispatch(TField&& f, TFunc&& func)
    {
        #ifdef _MSC_VER
            func.operator()<TIdx>(std::forward<TField>(f)); // VS compiler
        #else // #ifdef _MSC_VER
            func.template operator()<TIdx>(std::forward<TField>(f)); // All other compilers
        #endif // #ifdef _MSC_VER
    }
};

} // namespace field

} // namespace mqtt5
