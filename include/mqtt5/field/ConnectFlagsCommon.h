// Generated by commsdsl2comms v4.0.0

/// @file
/// @brief Contains common template parameters independent functionality of
///    @ref mqtt5::field::ConnectFlags field.

#pragma once

#include <type_traits>
#include "mqtt5/field/QosCommon.h"

namespace mqtt5
{

namespace field
{


/// @brief Scope for all the common definitions of the member fields of
///     @ref mqtt5::field::ConnectFlags field.
struct ConnectFlagsMembersCommon
{
    /// @brief Common types and functions for
    ///     @ref mqtt5::field::ConnectFlagsMembers::Low field.
    struct LowCommon
    {
        /// @brief Name of the @ref mqtt5::field::ConnectFlagsMembers::Low field.
        static const char* name()
        {
            return "";
        }

        /// @brief Retrieve name of the bit of
        ///     @ref mqtt5::field::ConnectFlagsMembers::Low field.
        static const char* bitName(std::size_t idx)
        {
            static const char* Map[] = {
                nullptr,
                "Clean Start",
                "Will Flag"
            };

            static const std::size_t MapSize = std::extent<decltype(Map)>::value;
            if (MapSize <= idx) {
                return nullptr;
            }

            return Map[idx];
        }


    };

    /// @brief Common types and functions for
    ///     @ref mqtt5::field::ConnectFlagsMembers::WillQos field.
    struct WillQosCommon : public mqtt5::field::QosCommon
    {
        /// @brief Name of the @ref mqtt5::field::ConnectFlagsMembers::WillQos field.
        static const char* name()
        {
            return "Will QoS";
        }

    };

    /// @brief Common types and functions for
    ///     @ref mqtt5::field::ConnectFlagsMembers::High field.
    struct HighCommon
    {
        /// @brief Name of the @ref mqtt5::field::ConnectFlagsMembers::High field.
        static const char* name()
        {
            return "";
        }

        /// @brief Retrieve name of the bit of
        ///     @ref mqtt5::field::ConnectFlagsMembers::High field.
        static const char* bitName(std::size_t idx)
        {
            static const char* Map[] = {
                "Will Retain",
                "Password Flag",
                "User Name Flag"
            };

            static const std::size_t MapSize = std::extent<decltype(Map)>::value;
            if (MapSize <= idx) {
                return nullptr;
            }

            return Map[idx];
        }


    };

};

/// @brief Common types and functions for
///     @ref mqtt5::field::ConnectFlags field.
struct ConnectFlagsCommon
{
    /// @brief Name of the @ref mqtt5::field::ConnectFlags field.
    static const char* name()
    {
        return "Connect Flags";
    }

};

} // namespace field

} // namespace mqtt5

