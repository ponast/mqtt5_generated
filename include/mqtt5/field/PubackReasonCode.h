// Generated by commsdsl2comms v4.0.0

/// @file
/// @brief Contains definition of <b>"Reason Code"</b> field.

#pragma once

#include "comms/field/EnumValue.h"
#include "comms/options.h"
#include "mqtt5/field/FieldBase.h"
#include "mqtt5/field/PubackReasonCodeCommon.h"
#include "mqtt5/options/DefaultOptions.h"

namespace mqtt5
{

namespace field
{


/// @brief Definition of <b>"Reason Code"</b> field.
/// @see @ref mqtt5::field::PubackReasonCodeCommon::ValueType
/// @tparam TOpt Protocol options.
/// @tparam TExtraOpts Extra options.
template <typename TOpt = mqtt5::options::DefaultOptions, typename... TExtraOpts>
class PubackReasonCode : public
    comms::field::EnumValue<
        mqtt5::field::FieldBase<>,
        mqtt5::field::PubackReasonCodeCommon::ValueType,
        TExtraOpts...
    >
{
    using Base =
        comms::field::EnumValue<
            mqtt5::field::FieldBase<>,
            mqtt5::field::PubackReasonCodeCommon::ValueType,
            TExtraOpts...
        >;
public:
    /// @brief Re-definition of the value type.
    using ValueType = typename Base::ValueType;
    
    /// @brief Single value name info entry.
    using ValueNameInfo = mqtt5::field::PubackReasonCodeCommon::ValueNameInfo;
    
    /// @brief Type returned from @ref valueNamesMap() member function.
    /// @see @ref mqtt5::field::PubackReasonCodeCommon::ValueNamesMapInfo.
    using ValueNamesMapInfo = mqtt5::field::PubackReasonCodeCommon::ValueNamesMapInfo;
    
    /// @brief Retrieve name of the enum value.
    /// @see @ref mqtt5::field::PubackReasonCodeCommon::valueName().
    static const char* valueName(ValueType val)
    {
        return mqtt5::field::PubackReasonCodeCommon::valueName(val);
    }
    
    /// @brief Retrieve name of the @b current value
    const char* valueName() const
    {
        return valueName(Base::value());
    }
    
    /// @brief Retrieve map of enum value names.
    /// @see @ref mqtt5::field::PubackReasonCodeCommon::valueNamesMap().
    static ValueNamesMapInfo valueNamesMap()
    {
        return mqtt5::field::PubackReasonCodeCommon::valueNamesMap();
    }
    
    
    /// @brief Name of the field.
    static const char* name()
    {
        return mqtt5::field::PubackReasonCodeCommon::name();
    }
    
    /// @brief Generated validity check functionality.
    bool valid() const
    {
        if (!Base::valid()) {
            return false;
        }
        
        static const ValueType Values[] = {
            ValueType::Success,
            ValueType::NoMatchingSubscribers,
            ValueType::UnspecifiedError,
            ValueType::ImplSpecificError,
            ValueType::NotAuthorized,
            ValueType::TopicNameInvalid,
            ValueType::PacketIdInUse,
            ValueType::QuotaExceeded,
            ValueType::PayloadFormatInvalid
        };
        
        auto iter =
            std::lower_bound(std::begin(Values), std::end(Values), Base::value());
        
        if ((iter == std::end(Values)) || (*iter != Base::value())) {
            return false;
        }
        
        return true;
        
    }
    
    

};


} // namespace field

} // namespace mqtt5

