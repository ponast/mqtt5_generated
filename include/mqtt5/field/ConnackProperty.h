// Generated by commsdsl2comms v4.0.0

/// @file
/// @brief Contains definition of <b>""</b> field.

#pragma once

#include <tuple>
#include "comms/CompileControl.h"
#include "comms/field/Variant.h"
#include "comms/options.h"
#include "mqtt5/field/AssignedClientId.h"
#include "mqtt5/field/AuthData.h"
#include "mqtt5/field/AuthMethod.h"
#include "mqtt5/field/ConnackPropertyCommon.h"
#include "mqtt5/field/FieldBase.h"
#include "mqtt5/field/MaxPacketSize.h"
#include "mqtt5/field/MaxQos.h"
#include "mqtt5/field/ReasonStr.h"
#include "mqtt5/field/ReceiveMax.h"
#include "mqtt5/field/ResponseInfo.h"
#include "mqtt5/field/RetainAvailable.h"
#include "mqtt5/field/ServerKeepAlive.h"
#include "mqtt5/field/ServerRef.h"
#include "mqtt5/field/SessionExpiryInterval.h"
#include "mqtt5/field/SharedSubAvail.h"
#include "mqtt5/field/SubIdAvail.h"
#include "mqtt5/field/TopicAliasMax.h"
#include "mqtt5/field/UserProperty.h"
#include "mqtt5/field/WildcardSubAvail.h"
#include "mqtt5/options/DefaultOptions.h"

namespace mqtt5
{

namespace field
{


/// @brief Scope for all the member fields of
///     @ref ConnackProperty field.
/// @tparam TOpt Protocol options.
template <typename TOpt = mqtt5::options::DefaultOptions>
struct ConnackPropertyMembers
{
    /// @brief Definition of <b>"Session Expiry Interval"</b> field.
    using SessionExpiryInterval =
        mqtt5::field::SessionExpiryInterval<
            TOpt
        >;


    /// @brief Definition of <b>"Receive Maximum"</b> field.
    using ReceiveMax =
        mqtt5::field::ReceiveMax<
            TOpt
        >;


    /// @brief Definition of <b>"Maximum QoS"</b> field.
    using MaxQos =
        mqtt5::field::MaxQos<
            TOpt
        >;


    /// @brief Definition of <b>"Retain Available"</b> field.
    using RetainAvailable =
        mqtt5::field::RetainAvailable<
            TOpt
        >;


    /// @brief Definition of <b>"Maximum Packet Size"</b> field.
    using MaxPacketSize =
        mqtt5::field::MaxPacketSize<
            TOpt
        >;


    /// @brief Definition of <b>"Assigned Client ID"</b> field.
    using AssignedClientId =
        mqtt5::field::AssignedClientId<
            TOpt
        >;


    /// @brief Definition of <b>"Topic Alias Maximum"</b> field.
    using TopicAliasMax =
        mqtt5::field::TopicAliasMax<
            TOpt
        >;


    /// @brief Definition of <b>"Reason String"</b> field.
    using ReasonStr =
        mqtt5::field::ReasonStr<
            TOpt
        >;


    /// @brief Definition of <b>"User Property"</b> field.
    using UserProperty =
        mqtt5::field::UserProperty<
            TOpt
        >;


    /// @brief Definition of <b>"Wildcard Subscription Available"</b> field.
    using WildcardSubAvail =
        mqtt5::field::WildcardSubAvail<
            TOpt
        >;


    /// @brief Definition of <b>"Subscription ID Available"</b> field.
    using SubIdAvail =
        mqtt5::field::SubIdAvail<
            TOpt
        >;


    /// @brief Definition of <b>"Shared Subscription Available"</b> field.
    using SharedSubAvail =
        mqtt5::field::SharedSubAvail<
            TOpt
        >;


    /// @brief Definition of <b>"Server Keep Alive"</b> field.
    using ServerKeepAlive =
        mqtt5::field::ServerKeepAlive<
            TOpt
        >;


    /// @brief Definition of <b>"Response Information"</b> field.
    using ResponseInfo =
        mqtt5::field::ResponseInfo<
            TOpt
        >;


    /// @brief Definition of <b>"Server Reference"</b> field.
    using ServerRef =
        mqtt5::field::ServerRef<
            TOpt
        >;


    /// @brief Definition of <b>"Authentication Method"</b> field.
    using AuthMethod =
        mqtt5::field::AuthMethod<
            TOpt
        >;


    /// @brief Definition of <b>"Authentication Data"</b> field.
    using AuthData =
        mqtt5::field::AuthData<
            TOpt
        >;


    /// @brief All members bundled in @b std::tuple.
    using All =
        std::tuple<
           SessionExpiryInterval,
           ReceiveMax,
           MaxQos,
           RetainAvailable,
           MaxPacketSize,
           AssignedClientId,
           TopicAliasMax,
           ReasonStr,
           UserProperty,
           WildcardSubAvail,
           SubIdAvail,
           SharedSubAvail,
           ServerKeepAlive,
           ResponseInfo,
           ServerRef,
           AuthMethod,
           AuthData
        >;
};

/// @brief Definition of <b>""</b> field.
/// @tparam TOpt Protocol options.
/// @tparam TExtraOpts Extra options.
template <typename TOpt = mqtt5::options::DefaultOptions, typename... TExtraOpts>
class ConnackProperty : public
    comms::field::Variant<
        mqtt5::field::FieldBase<>,
        typename ConnackPropertyMembers<TOpt>::All,
        TExtraOpts...
    >
{
    using Base =
        comms::field::Variant<
            mqtt5::field::FieldBase<>,
            typename ConnackPropertyMembers<TOpt>::All,
            TExtraOpts...
        >;
public:
    /// @brief Allow access to internal fields.
    /// @details See definition of @b COMMS_VARIANT_MEMBERS_NAMES macro
    ///     related to @b comms::field::Variant class from COMMS library
    ///     for details.
    ///
    ///     The generated values, types and access functions are:
    ///     @li @b FieldIdx_sessionExpiryInterval index, @b Field_sessionExpiryInterval type,
    ///         @b initField_sessionExpiryInterval() and @b accessField_sessionExpiryInterval() access functions -
    ///         for mqtt5::field::ConnackPropertyMembers::SessionExpiryInterval member field.
    ///     @li @b FieldIdx_receiveMax index, @b Field_receiveMax type,
    ///         @b initField_receiveMax() and @b accessField_receiveMax() access functions -
    ///         for mqtt5::field::ConnackPropertyMembers::ReceiveMax member field.
    ///     @li @b FieldIdx_maxQos index, @b Field_maxQos type,
    ///         @b initField_maxQos() and @b accessField_maxQos() access functions -
    ///         for mqtt5::field::ConnackPropertyMembers::MaxQos member field.
    ///     @li @b FieldIdx_retainAvailable index, @b Field_retainAvailable type,
    ///         @b initField_retainAvailable() and @b accessField_retainAvailable() access functions -
    ///         for mqtt5::field::ConnackPropertyMembers::RetainAvailable member field.
    ///     @li @b FieldIdx_maxPacketSize index, @b Field_maxPacketSize type,
    ///         @b initField_maxPacketSize() and @b accessField_maxPacketSize() access functions -
    ///         for mqtt5::field::ConnackPropertyMembers::MaxPacketSize member field.
    ///     @li @b FieldIdx_assignedClientId index, @b Field_assignedClientId type,
    ///         @b initField_assignedClientId() and @b accessField_assignedClientId() access functions -
    ///         for mqtt5::field::ConnackPropertyMembers::AssignedClientId member field.
    ///     @li @b FieldIdx_topicAliasMax index, @b Field_topicAliasMax type,
    ///         @b initField_topicAliasMax() and @b accessField_topicAliasMax() access functions -
    ///         for mqtt5::field::ConnackPropertyMembers::TopicAliasMax member field.
    ///     @li @b FieldIdx_reasonStr index, @b Field_reasonStr type,
    ///         @b initField_reasonStr() and @b accessField_reasonStr() access functions -
    ///         for mqtt5::field::ConnackPropertyMembers::ReasonStr member field.
    ///     @li @b FieldIdx_userProperty index, @b Field_userProperty type,
    ///         @b initField_userProperty() and @b accessField_userProperty() access functions -
    ///         for mqtt5::field::ConnackPropertyMembers::UserProperty member field.
    ///     @li @b FieldIdx_wildcardSubAvail index, @b Field_wildcardSubAvail type,
    ///         @b initField_wildcardSubAvail() and @b accessField_wildcardSubAvail() access functions -
    ///         for mqtt5::field::ConnackPropertyMembers::WildcardSubAvail member field.
    ///     @li @b FieldIdx_subIdAvail index, @b Field_subIdAvail type,
    ///         @b initField_subIdAvail() and @b accessField_subIdAvail() access functions -
    ///         for mqtt5::field::ConnackPropertyMembers::SubIdAvail member field.
    ///     @li @b FieldIdx_sharedSubAvail index, @b Field_sharedSubAvail type,
    ///         @b initField_sharedSubAvail() and @b accessField_sharedSubAvail() access functions -
    ///         for mqtt5::field::ConnackPropertyMembers::SharedSubAvail member field.
    ///     @li @b FieldIdx_serverKeepAlive index, @b Field_serverKeepAlive type,
    ///         @b initField_serverKeepAlive() and @b accessField_serverKeepAlive() access functions -
    ///         for mqtt5::field::ConnackPropertyMembers::ServerKeepAlive member field.
    ///     @li @b FieldIdx_responseInfo index, @b Field_responseInfo type,
    ///         @b initField_responseInfo() and @b accessField_responseInfo() access functions -
    ///         for mqtt5::field::ConnackPropertyMembers::ResponseInfo member field.
    ///     @li @b FieldIdx_serverRef index, @b Field_serverRef type,
    ///         @b initField_serverRef() and @b accessField_serverRef() access functions -
    ///         for mqtt5::field::ConnackPropertyMembers::ServerRef member field.
    ///     @li @b FieldIdx_authMethod index, @b Field_authMethod type,
    ///         @b initField_authMethod() and @b accessField_authMethod() access functions -
    ///         for mqtt5::field::ConnackPropertyMembers::AuthMethod member field.
    ///     @li @b FieldIdx_authData index, @b Field_authData type,
    ///         @b initField_authData() and @b accessField_authData() access functions -
    ///         for mqtt5::field::ConnackPropertyMembers::AuthData member field.
    COMMS_VARIANT_MEMBERS_NAMES(
        sessionExpiryInterval,
        receiveMax,
        maxQos,
        retainAvailable,
        maxPacketSize,
        assignedClientId,
        topicAliasMax,
        reasonStr,
        userProperty,
        wildcardSubAvail,
        subIdAvail,
        sharedSubAvail,
        serverKeepAlive,
        responseInfo,
        serverRef,
        authMethod,
        authData
    );

    /// @brief Optimized currFieldExec functionality.
    /// @details Replaces the currFieldExec() member function defined
    ///    by @b comms::field::Variant.
    template <typename TFunc>
    void currFieldExec(TFunc&& func)
    {
        switch (Base::currentField()) {
        case FieldIdx_sessionExpiryInterval:
            memFieldDispatch<FieldIdx_sessionExpiryInterval>(accessField_sessionExpiryInterval(), std::forward<TFunc>(func));
            break;
        case FieldIdx_receiveMax:
            memFieldDispatch<FieldIdx_receiveMax>(accessField_receiveMax(), std::forward<TFunc>(func));
            break;
        case FieldIdx_maxQos:
            memFieldDispatch<FieldIdx_maxQos>(accessField_maxQos(), std::forward<TFunc>(func));
            break;
        case FieldIdx_retainAvailable:
            memFieldDispatch<FieldIdx_retainAvailable>(accessField_retainAvailable(), std::forward<TFunc>(func));
            break;
        case FieldIdx_maxPacketSize:
            memFieldDispatch<FieldIdx_maxPacketSize>(accessField_maxPacketSize(), std::forward<TFunc>(func));
            break;
        case FieldIdx_assignedClientId:
            memFieldDispatch<FieldIdx_assignedClientId>(accessField_assignedClientId(), std::forward<TFunc>(func));
            break;
        case FieldIdx_topicAliasMax:
            memFieldDispatch<FieldIdx_topicAliasMax>(accessField_topicAliasMax(), std::forward<TFunc>(func));
            break;
        case FieldIdx_reasonStr:
            memFieldDispatch<FieldIdx_reasonStr>(accessField_reasonStr(), std::forward<TFunc>(func));
            break;
        case FieldIdx_userProperty:
            memFieldDispatch<FieldIdx_userProperty>(accessField_userProperty(), std::forward<TFunc>(func));
            break;
        case FieldIdx_wildcardSubAvail:
            memFieldDispatch<FieldIdx_wildcardSubAvail>(accessField_wildcardSubAvail(), std::forward<TFunc>(func));
            break;
        case FieldIdx_subIdAvail:
            memFieldDispatch<FieldIdx_subIdAvail>(accessField_subIdAvail(), std::forward<TFunc>(func));
            break;
        case FieldIdx_sharedSubAvail:
            memFieldDispatch<FieldIdx_sharedSubAvail>(accessField_sharedSubAvail(), std::forward<TFunc>(func));
            break;
        case FieldIdx_serverKeepAlive:
            memFieldDispatch<FieldIdx_serverKeepAlive>(accessField_serverKeepAlive(), std::forward<TFunc>(func));
            break;
        case FieldIdx_responseInfo:
            memFieldDispatch<FieldIdx_responseInfo>(accessField_responseInfo(), std::forward<TFunc>(func));
            break;
        case FieldIdx_serverRef:
            memFieldDispatch<FieldIdx_serverRef>(accessField_serverRef(), std::forward<TFunc>(func));
            break;
        case FieldIdx_authMethod:
            memFieldDispatch<FieldIdx_authMethod>(accessField_authMethod(), std::forward<TFunc>(func));
            break;
        case FieldIdx_authData:
            memFieldDispatch<FieldIdx_authData>(accessField_authData(), std::forward<TFunc>(func));
            break;
        default:
            static constexpr bool Invalid_field_execution = false;
            static_cast<void>(Invalid_field_execution);
            COMMS_ASSERT(Invalid_field_execution);
            break;
        }
    }

    /// @brief Optimized currFieldExec functionality (const variant).
    /// @details Replaces the currFieldExec() member function defined
    ///    by @b comms::field::Variant.
    template <typename TFunc>
    void currFieldExec(TFunc&& func) const
    {
        switch (Base::currentField()) {
        case FieldIdx_sessionExpiryInterval:
            memFieldDispatch<FieldIdx_sessionExpiryInterval>(accessField_sessionExpiryInterval(), std::forward<TFunc>(func));
            break;
        case FieldIdx_receiveMax:
            memFieldDispatch<FieldIdx_receiveMax>(accessField_receiveMax(), std::forward<TFunc>(func));
            break;
        case FieldIdx_maxQos:
            memFieldDispatch<FieldIdx_maxQos>(accessField_maxQos(), std::forward<TFunc>(func));
            break;
        case FieldIdx_retainAvailable:
            memFieldDispatch<FieldIdx_retainAvailable>(accessField_retainAvailable(), std::forward<TFunc>(func));
            break;
        case FieldIdx_maxPacketSize:
            memFieldDispatch<FieldIdx_maxPacketSize>(accessField_maxPacketSize(), std::forward<TFunc>(func));
            break;
        case FieldIdx_assignedClientId:
            memFieldDispatch<FieldIdx_assignedClientId>(accessField_assignedClientId(), std::forward<TFunc>(func));
            break;
        case FieldIdx_topicAliasMax:
            memFieldDispatch<FieldIdx_topicAliasMax>(accessField_topicAliasMax(), std::forward<TFunc>(func));
            break;
        case FieldIdx_reasonStr:
            memFieldDispatch<FieldIdx_reasonStr>(accessField_reasonStr(), std::forward<TFunc>(func));
            break;
        case FieldIdx_userProperty:
            memFieldDispatch<FieldIdx_userProperty>(accessField_userProperty(), std::forward<TFunc>(func));
            break;
        case FieldIdx_wildcardSubAvail:
            memFieldDispatch<FieldIdx_wildcardSubAvail>(accessField_wildcardSubAvail(), std::forward<TFunc>(func));
            break;
        case FieldIdx_subIdAvail:
            memFieldDispatch<FieldIdx_subIdAvail>(accessField_subIdAvail(), std::forward<TFunc>(func));
            break;
        case FieldIdx_sharedSubAvail:
            memFieldDispatch<FieldIdx_sharedSubAvail>(accessField_sharedSubAvail(), std::forward<TFunc>(func));
            break;
        case FieldIdx_serverKeepAlive:
            memFieldDispatch<FieldIdx_serverKeepAlive>(accessField_serverKeepAlive(), std::forward<TFunc>(func));
            break;
        case FieldIdx_responseInfo:
            memFieldDispatch<FieldIdx_responseInfo>(accessField_responseInfo(), std::forward<TFunc>(func));
            break;
        case FieldIdx_serverRef:
            memFieldDispatch<FieldIdx_serverRef>(accessField_serverRef(), std::forward<TFunc>(func));
            break;
        case FieldIdx_authMethod:
            memFieldDispatch<FieldIdx_authMethod>(accessField_authMethod(), std::forward<TFunc>(func));
            break;
        case FieldIdx_authData:
            memFieldDispatch<FieldIdx_authData>(accessField_authData(), std::forward<TFunc>(func));
            break;
        default:
            static constexpr bool Invalid_field_execution = false;
            static_cast<void>(Invalid_field_execution);
            COMMS_ASSERT(Invalid_field_execution);
            break;
        }
    }

    /// @brief Name of the field.
    static const char* name()
    {
        return mqtt5::field::ConnackPropertyCommon::name();
    }


private:
    template <std::size_t TIdx, typename TField, typename TFunc>
    static void memFieldDispatch(TField&& f, TFunc&& func)
    {
        #ifdef _MSC_VER
            func.operator()<TIdx>(std::forward<TField>(f)); // VS compiler
        #else // #ifdef _MSC_VER
            func.template operator()<TIdx>(std::forward<TField>(f)); // All other compilers
        #endif // #ifdef _MSC_VER
    }


};


} // namespace field

} // namespace mqtt5

