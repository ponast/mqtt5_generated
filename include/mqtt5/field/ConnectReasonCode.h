// Generated by commsdsl2comms v5.0.0

/// @file
/// @brief Contains definition of <b>"Reason code"</b> field.

#pragma once

#include "comms/field/EnumValue.h"
#include "comms/options.h"
#include "mqtt5/field/ConnectReasonCodeCommon.h"
#include "mqtt5/field/FieldBase.h"
#include "mqtt5/options/DefaultOptions.h"

namespace mqtt5
{

namespace field
{

/// @brief Definition of <b>"Reason code"</b> field.
/// @details
///     Defined in section 3.2.2.2.
/// @see @ref mqtt5::field::ConnectReasonCodeCommon::ValueType
/// @tparam TOpt Protocol options.
/// @tparam TExtraOpts Extra options.
template <typename TOpt = mqtt5::options::DefaultOptions, typename... TExtraOpts>
class ConnectReasonCode : public
    comms::field::EnumValue<
        mqtt5::field::FieldBase<>,
        mqtt5::field::ConnectReasonCodeCommon::ValueType,
        TExtraOpts...
    >
{
    using Base =
        comms::field::EnumValue<
            mqtt5::field::FieldBase<>,
            mqtt5::field::ConnectReasonCodeCommon::ValueType,
            TExtraOpts...
        >;
public:
    /// @brief Re-definition of the value type.
    using ValueType = typename Base::ValueType;

    /// @brief Single value name info entry.
    using ValueNameInfo = mqtt5::field::ConnectReasonCodeCommon::ValueNameInfo;

    /// @brief Type returned from @ref valueNamesMap() member function.
    /// @see @ref mqtt5::field::ConnectReasonCodeCommon::ValueNamesMapInfo.
    using ValueNamesMapInfo = mqtt5::field::ConnectReasonCodeCommon::ValueNamesMapInfo;

    /// @brief Retrieve name of the enum value.
    /// @see @ref mqtt5::field::ConnectReasonCodeCommon::valueName().
    static const char* valueName(ValueType val)
    {
        return mqtt5::field::ConnectReasonCodeCommon::valueName(val);
    }

    /// @brief Retrieve name of the @b current value
    const char* valueName() const
    {
        return valueName(Base::getValue());
    }

    /// @brief Retrieve map of enum value names.
    /// @see @ref mqtt5::field::ConnectReasonCodeCommon::valueNamesMap().
    static ValueNamesMapInfo valueNamesMap()
    {
        return mqtt5::field::ConnectReasonCodeCommon::valueNamesMap();
    }

    /// @brief Name of the field.
    static const char* name()
    {
        return mqtt5::field::ConnectReasonCodeCommon::name();
    }

    /// @brief Generated validity check functionality.
    bool valid() const
    {
        if (!Base::valid()) {
            return false;
        }

        static const ValueType Values[] = {
            ValueType::Success,
            ValueType::UnspecifiedError,
            ValueType::MalformedPacket,
            ValueType::ProtocolError,
            ValueType::ImplSpecificError,
            ValueType::UnsupportedVersion,
            ValueType::ClientIdInvalid,
            ValueType::BadUserPassword,
            ValueType::NotAuthorized,
            ValueType::ServerUnavailable,
            ValueType::ServerBusy,
            ValueType::Banned,
            ValueType::BadAuthMethod,
            ValueType::TopicNameInvalid,
            ValueType::PacketTooLarge,
            ValueType::QuotaExceeded,
            ValueType::PayloadFormatInvalid,
            ValueType::RetainNotSupported,
            ValueType::QosNotSupported,
            ValueType::UseAnotherServer,
            ValueType::ServerMoved,
            ValueType::ConnectionRateExceeded
        };

        auto iter =
            std::lower_bound(std::begin(Values), std::end(Values), Base::getValue());

        if ((iter == std::end(Values)) || (*iter != Base::getValue())) {
            return false;
        }

        return true;
    }
};

} // namespace field

} // namespace mqtt5
