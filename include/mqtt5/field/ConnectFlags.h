// Generated by commsdsl2comms v5.0.0

/// @file
/// @brief Contains definition of <b>"Connect flags"</b> field.

#pragma once

#include <tuple>
#include "comms/field/Bitfield.h"
#include "comms/field/BitmaskValue.h"
#include "comms/options.h"
#include "mqtt5/field/ConnectFlagsCommon.h"
#include "mqtt5/field/FieldBase.h"
#include "mqtt5/field/Qos.h"
#include "mqtt5/options/DefaultOptions.h"

namespace mqtt5
{

namespace field
{

/// @brief Scope for all the member fields of
///     @ref ConnectFlags field.
/// @tparam TOpt Protocol options.
template <typename TOpt = mqtt5::options::DefaultOptions>
struct ConnectFlagsMembers
{
    /// @brief Definition of <b>""</b> field.
    class Low : public
        comms::field::BitmaskValue<
            mqtt5::field::FieldBase<>,
            comms::option::def::FixedBitLength<3U>,
            comms::option::def::BitmaskReservedBits<0x1U, 0x0U>
        >
    {
        using Base =
            comms::field::BitmaskValue<
                mqtt5::field::FieldBase<>,
                comms::option::def::FixedBitLength<3U>,
                comms::option::def::BitmaskReservedBits<0x1U, 0x0U>
            >;
    public:
        /// @brief Provide names for internal bits.
        /// @details See definition of @b COMMS_BITMASK_BITS macro
        ///     related to @b comms::field::BitmaskValue class from COMMS library
        ///     for details.
        ///
        ///      The generated enum values:
        ///      @li @b BitIdx_cleanStart.
        ///      @li @b BitIdx_willFlag.
        COMMS_BITMASK_BITS(
            cleanStart=1,
            willFlag=2
        );

        /// @brief Generates independent access functions for internal bits.
        /// @details See definition of @b COMMS_BITMASK_BITS_ACCESS macro
        ///     related to @b comms::field::BitmaskValue class from COMMS library
        ///     for details.
        ///
        ///     The generated access functions are:
        ///      @li @b getBitValue_cleanStart() and @b setBitValue_cleanStart().
        ///      @li @b getBitValue_willFlag() and @b setBitValue_willFlag().
        COMMS_BITMASK_BITS_ACCESS(
            cleanStart,
            willFlag
        );

        /// @brief Retrieve name of the bit.
        /// @see @ref mqtt5::field::ConnectFlagsMembersCommon::LowCommon::bitName().
        static const char* bitName(BitIdx idx)
        {
            return
                mqtt5::field::ConnectFlagsMembersCommon::LowCommon::bitName(
                    static_cast<std::size_t>(idx));
        }

        /// @brief Name of the field.
        static const char* name()
        {
            return mqtt5::field::ConnectFlagsMembersCommon::LowCommon::name();
        }
    };

    /// @brief Definition of <b>"Will QoS"</b> field.
    /// @details
    ///     Defined in section 3.1.2.6.
    class WillQos : public
        mqtt5::field::Qos<
            TOpt,
            comms::option::def::FixedBitLength<2U>
        >
    {
        using Base =
            mqtt5::field::Qos<
                TOpt,
                comms::option::def::FixedBitLength<2U>
            >;
    public:
        /// @brief Name of the field.
        static const char* name()
        {
            return mqtt5::field::ConnectFlagsMembersCommon::WillQosCommon::name();
        }
    };

    /// @brief Definition of <b>""</b> field.
    class High : public
        comms::field::BitmaskValue<
            mqtt5::field::FieldBase<>,
            comms::option::def::FixedBitLength<3U>
        >
    {
        using Base =
            comms::field::BitmaskValue<
                mqtt5::field::FieldBase<>,
                comms::option::def::FixedBitLength<3U>
            >;
    public:
        /// @brief Provides names and generates access functions for internal bits.
        /// @details See definition of @b COMMS_BITMASK_BITS_SEQ macro
        ///     related to @b comms::field::BitmaskValue class from COMMS library
        ///     for details.
        ///
        ///      The generated enum values and functions are:
        ///      @li @b BitIdx_willRetain, @b getBitValue_willRetain() and @b setBitValue_willRetain().
        ///      @li @b BitIdx_passwordFlag, @b getBitValue_passwordFlag() and @b setBitValue_passwordFlag().
        ///      @li @b BitIdx_userNameFlag, @b getBitValue_userNameFlag() and @b setBitValue_userNameFlag().
        COMMS_BITMASK_BITS_SEQ(
            willRetain,
            passwordFlag,
            userNameFlag
        );

        /// @brief Retrieve name of the bit.
        /// @see @ref mqtt5::field::ConnectFlagsMembersCommon::HighCommon::bitName().
        static const char* bitName(BitIdx idx)
        {
            return
                mqtt5::field::ConnectFlagsMembersCommon::HighCommon::bitName(
                    static_cast<std::size_t>(idx));
        }

        /// @brief Name of the field.
        static const char* name()
        {
            return mqtt5::field::ConnectFlagsMembersCommon::HighCommon::name();
        }
    };

    /// @brief All members bundled in @b std::tuple.
    using All =
        std::tuple<
           Low,
           WillQos,
           High
        >;
};

/// @brief Definition of <b>"Connect flags"</b> field.
/// @details
///     Defined in section 3.1.2.3.
/// @tparam TOpt Protocol options.
/// @tparam TExtraOpts Extra options.
template <typename TOpt = mqtt5::options::DefaultOptions, typename... TExtraOpts>
class ConnectFlags : public
    comms::field::Bitfield<
        mqtt5::field::FieldBase<>,
        typename ConnectFlagsMembers<TOpt>::All,
        TExtraOpts...
    >
{
    using Base =
        comms::field::Bitfield<
            mqtt5::field::FieldBase<>,
            typename ConnectFlagsMembers<TOpt>::All,
            TExtraOpts...
        >;
public:
    /// @brief Allow access to internal fields.
    /// @details See definition of @b COMMS_FIELD_MEMBERS_NAMES macro
    ///     related to @b comms::field::Bitfield class from COMMS library
    ///     for details.
    ///
    ///     The generated values, types and access functions are:
    ///     @li @b FieldIdx_low index, @b Field_low type and @b field_low() access function -
    ///         for mqtt5::field::ConnectFlagsMembers::Low member field.
    ///     @li @b FieldIdx_willQos index, @b Field_willQos type and @b field_willQos() access function -
    ///         for mqtt5::field::ConnectFlagsMembers::WillQos member field.
    ///     @li @b FieldIdx_high index, @b Field_high type and @b field_high() access function -
    ///         for mqtt5::field::ConnectFlagsMembers::High member field.
    COMMS_FIELD_MEMBERS_NAMES(
        low,
        willQos,
        high
    );

    /// @brief Name of the field.
    static const char* name()
    {
        return mqtt5::field::ConnectFlagsCommon::name();
    }
};

} // namespace field

} // namespace mqtt5
