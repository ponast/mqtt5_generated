// Generated by commsdsl2comms v5.0.0

/// @file
/// @brief Contains common template parameters independent functionality of
///    @ref mqtt5::field::SubscribeOptions field.

#pragma once

#include <algorithm>
#include <cstdint>
#include <iterator>
#include <type_traits>
#include <utility>
#include "mqtt5/field/QosCommon.h"

namespace mqtt5
{

namespace field
{

/// @brief Scope for all the common definitions of the member fields of
///     @ref mqtt5::field::SubscribeOptions field.
struct SubscribeOptionsMembersCommon
{
    /// @brief Common types and functions for
    ///     @ref mqtt5::field::SubscribeOptionsMembers::MaxQos field.
    struct MaxQosCommon : public mqtt5::field::QosCommon
    {
        /// @brief Name of the @ref mqtt5::field::SubscribeOptionsMembers::MaxQos field.
        static const char* name()
        {
            return "MaxQos";
        }
    };

    /// @brief Common types and functions for
    ///     @ref mqtt5::field::SubscribeOptionsMembers::Bits field.
    struct BitsCommon
    {
        /// @brief Name of the @ref mqtt5::field::SubscribeOptionsMembers::Bits field.
        static const char* name()
        {
            return "";
        }

        /// @brief Retrieve name of the bit of
        ///     @ref mqtt5::field::SubscribeOptionsMembers::Bits field.
        static const char* bitName(std::size_t idx)
        {
            static const char* Map[] = {
                "NoLocal",
                "RetainAsPublished"
            };

            static const std::size_t MapSize = std::extent<decltype(Map)>::value;
            if (MapSize <= idx) {
                return nullptr;
            }

            return Map[idx];
        }
    };

    /// @brief Common types and functions for
    ///     @ref mqtt5::field::SubscribeOptionsMembers::RetainHandling field.
    struct RetainHandlingCommon
    {
        /// @brief Values enumerator for
        ///     @ref mqtt5::field::SubscribeOptionsMembers::RetainHandling field.
        enum class ValueType : std::uint8_t
        {
            Send = 0, ///< value @b Send.
            SendIfNotExists = 1, ///< value @b SendIfNotExists.
            DontSend = 2, ///< value @b DontSend.

            // --- Extra values generated for convenience ---
            FirstValue = 0, ///< First defined value.
            LastValue = 2, ///< Last defined value.
            ValuesLimit = 3, ///< Upper limit for defined values.
        };

        /// @brief Single value name info entry
        using ValueNameInfo = const char*;

        /// @brief Type returned from @ref valueNamesMap() member function.
        /// @details The @b first value of the pair is pointer to the map array,
        ///     The @b second value of the pair is the size of the array.
        using ValueNamesMapInfo = std::pair<const ValueNameInfo*, std::size_t>;

        /// @brief Name of the @ref mqtt5::field::SubscribeOptionsMembers::RetainHandling field.
        static const char* name()
        {
            return "RetainHandling";
        }

        /// @brief Retrieve name of the enum value
        static const char* valueName(ValueType val)
        {
            auto namesMapInfo = valueNamesMap();
            if (namesMapInfo.second <= static_cast<std::size_t>(val)) {
                return nullptr;
            }

            return namesMapInfo.first[static_cast<std::size_t>(val)];
        }

        /// @brief Retrieve map of enum value names
        static ValueNamesMapInfo valueNamesMap()
        {
            static const char* Map[] = {
                "Send",
                "SendIfNotExists",
                "DontSend"
            };
            static const std::size_t MapSize = std::extent<decltype(Map)>::value;

            return std::make_pair(&Map[0], MapSize);
        }
    };

    /// @brief Values enumerator for
    ///     @ref mqtt5::field::SubscribeOptionsMembers::RetainHandling field.
    using RetainHandlingVal = RetainHandlingCommon::ValueType;

    /// @brief Common types and functions for
    ///     @ref mqtt5::field::SubscribeOptionsMembers::Reserved field.
    struct ReservedCommon
    {
        /// @brief Re-definition of the value type used by
        ///     mqtt5::field::SubscribeOptionsMembers::Reserved field.
        using ValueType = std::uint8_t;

        /// @brief Name of the @ref mqtt5::field::SubscribeOptionsMembers::Reserved field.
        static const char* name()
        {
            return "Reserved";
        }

        /// @brief Compile time detection of special values presence.
        static constexpr bool hasSpecials()
        {
            return false;
        }
    };
};

/// @brief Common types and functions for
///     @ref mqtt5::field::SubscribeOptions field.
struct SubscribeOptionsCommon
{
    /// @brief Name of the @ref mqtt5::field::SubscribeOptions field.
    static const char* name()
    {
        return "SubscribeOptions";
    }
};

} // namespace field

} // namespace mqtt5
